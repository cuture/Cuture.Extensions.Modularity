// <Auto-Generated></Auto-Generated>

using System;
using System.IO;

using Microsoft.AspNetCore.Builder;

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace WebApiHostSample;

public class Startup
{
#if SlimStartup

    //�����Startup��ʾ��
    //��Asp.net��ConfigureServices��Configure�������ƶ���ģ���н�������

    public void ConfigureServices(IServiceCollection services)
    {
        //IApplicationBuilder�޷�ע�뵽DI�����������ʱ��Ҫ�������.
        //����ʹ��ObjectAccessorʵ�ַ��ʣ�����ʹ�ó�ʼ�������Ĵ���

        //����IApplicationBuilder�ķ��������Ա������ģ���н��з���
        services.AddObjectAccessor<IApplicationBuilder>();

        var module3Path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "SampleModule3.dll");
        var module5Directory = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "plugins");

        //����ģ��
        services.LoadModule<AspnetSampleModule>()
                .AddModuleFile(module3Path) //���ļ�����
                .AddModuleDirectory(source =>
                {
                    source.SearchDepth = 5;    //�����ļ����������
                }, module5Directory)  //���ļ��м���
                .AutoBindModuleOptions()    //�Զ�ʹ�� IConfiguration �󶨱���� AutoRegisterServicesInAssemblyAttribute ��ģ���м̳��� IOptions<TOptions> ����
                .ModuleLoadComplete();  //��ɼ���
    }

    public void Configure(IApplicationBuilder app)
    {
        var serviceProvider = app.ApplicationServices;

        //ΪIApplicationBuilder�ķ���������ֵ���Ա������ģ���н��з���
        serviceProvider.SetObjectAccessorValue(app);

        //��IApplicationBuilder��Ϊ��app�����ݵ���ʼ��������
        serviceProvider.InitializationModules("app", app);

        //�Ƴ������������ֵ��ʹ�䲻������IApplicationBuilder
        serviceProvider.RemoveObjectAccessorValue<IApplicationBuilder>();
    }

#else

    //��ͨ��Startup��ʾ��
    //Asp.netĬ�ϵ����÷�ʽ

    public void ConfigureServices(IServiceCollection services)
    {
        services.AddControllers();

        //��Asp.net������ɺ����ģ��
        services.LoadModule<AspnetSampleModule>().ModuleLoadComplete();
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        //��Configure�г�ʼ��ģ��
        app.ApplicationServices.InitializationModules();

        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        app.UseRouting();

        app.UseAuthorization();

        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });
    }

#endif
}
