// <Auto-Generated></Auto-Generated>

using System;
using System.Reflection;

using Volo.Abp.Modularity;

namespace OtherModuleSystemAdaptSample;

/// <summary>
/// abp模块适配模块
/// </summary>
[Cuture.Extensions.Modularity.AutoRegisterServicesInAssembly(typeof(AbpAdaptedServiceRegistrar))]
public class AbpModuleAdapterModule<TAbpModule> : Cuture.Extensions.Modularity.AppModule where TAbpModule : IAbpModule
{
    public IAbpModule AbpModule { get; }
    private static readonly MethodInfo _setServiceConfigurationContextMethodInfo;

    static AbpModuleAdapterModule()
    {
        var propertyInfo = typeof(AbpModule).GetProperty("ServiceConfigurationContext", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);
        _setServiceConfigurationContextMethodInfo = propertyInfo.GetSetMethod(true);
    }

    public AbpModuleAdapterModule()
    {
        AbpModule = (IAbpModule)Activator.CreateInstance(typeof(TAbpModule));
    }

    public override void PreConfigureServices(Cuture.Extensions.Modularity.ServiceConfigurationContext context)
    {
        base.PreConfigureServices(context);

        ServiceConfigurationContext abpContext = null;

        if (AbpModule is AbpModule)
        {
            abpContext = GetServiceConfigurationContext(context);

            var action = _setServiceConfigurationContextMethodInfo.CreateDelegate(typeof(Action<Volo.Abp.Modularity.ServiceConfigurationContext>), AbpModule) as Action<Volo.Abp.Modularity.ServiceConfigurationContext>;

            action.Invoke(abpContext);
        }

        if (AbpModule is Volo.Abp.Modularity.IPreConfigureServices preConfigureServices)
        {
            abpContext ??= GetServiceConfigurationContext(context);
            preConfigureServices.PreConfigureServices(abpContext);
        }
    }

    public override void ConfigureServices(Cuture.Extensions.Modularity.ServiceConfigurationContext context)
    {
        base.ConfigureServices(context);

        var abpContext = GetServiceConfigurationContext(context);
        AbpModule.ConfigureServices(abpContext);
    }

    public override void PostConfigureServices(Cuture.Extensions.Modularity.ServiceConfigurationContext context)
    {
        base.PostConfigureServices(context);

        if (AbpModule is Volo.Abp.Modularity.IPostConfigureServices postConfigureServices)
        {
            var abpContext = GetServiceConfigurationContext(context);
            postConfigureServices.PostConfigureServices(abpContext);
        }
    }

    public override void OnPreApplicationInitialization(Cuture.Extensions.Modularity.ApplicationInitializationContext context)
    {
        base.OnPreApplicationInitialization(context);

        if (AbpModule is Volo.Abp.Modularity.IOnPreApplicationInitialization onPreApplicationInitialization)
        {
            var abpContext = new Volo.Abp.ApplicationInitializationContext(context.ServiceProvider);
            onPreApplicationInitialization.OnPreApplicationInitialization(abpContext);
        }
    }

    public override void OnApplicationInitialization(Cuture.Extensions.Modularity.ApplicationInitializationContext context)
    {
        base.OnApplicationInitialization(context);

        if (AbpModule is Volo.Abp.IOnApplicationInitialization onApplicationInitialization)
        {
            var abpContext = new Volo.Abp.ApplicationInitializationContext(context.ServiceProvider);
            onApplicationInitialization.OnApplicationInitialization(abpContext);
        }
    }

    public override void OnPostApplicationInitialization(Cuture.Extensions.Modularity.ApplicationInitializationContext context)
    {
        base.OnPostApplicationInitialization(context);
        if (AbpModule is Volo.Abp.Modularity.IOnPostApplicationInitialization onPostApplicationInitialization)
        {
            var abpContext = new Volo.Abp.ApplicationInitializationContext(context.ServiceProvider);
            onPostApplicationInitialization.OnPostApplicationInitialization(abpContext);
        }
    }

    public override void OnApplicationShutdown(Cuture.Extensions.Modularity.ApplicationShutdownContext context)
    {
        base.OnApplicationShutdown(context);
        if (AbpModule is Volo.Abp.IOnApplicationShutdown onApplicationShutdown)
        {
            var abpContext = new Volo.Abp.ApplicationShutdownContext(context.ServiceProvider);
            onApplicationShutdown.OnApplicationShutdown(abpContext);
        }
    }

    private static ServiceConfigurationContext GetServiceConfigurationContext(Cuture.Extensions.Modularity.ServiceConfigurationContext context)
    {
        var abpContext = new Volo.Abp.Modularity.ServiceConfigurationContext(context.Services);
        foreach (var item in context.Items)
        {
            abpContext.Items.Add(item);
        }

        return abpContext;
    }
}
