// <Auto-Generated></Auto-Generated>

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

using Cuture.Extensions.Modularity;

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DiagnosticAdapter;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace DependencyInjection.Modularity.Test.Loads;

[TestClass]
public abstract class LoadTestBase : DIContainerTestBase
{
    #region Protected 属性

    protected List<KeyValuePair<string, string>> InvokeLogs => MethodInvokedLogger?.Logs;
    protected ModuleMethodInvokedLogger MethodInvokedLogger { get; set; }
    protected IDisposable ObserverDisposer { get; set; }
    protected IServiceProvider ServiceProvider { get; set; }

    #endregion Protected 属性

    #region func

    protected List<KeyValuePair<string, string[]>> GetModuleOrderList(Type[] types)
    {
        static void VisitDependencyNode(IModuleDescriptor descriptor, List<KeyValuePair<string, string[]>> orderList)
        {
            orderList.Add(new KeyValuePair<string, string[]>(descriptor.Type.Name, descriptor.Dependencies.Select(m => m.Type.Name).ToArray()));
            foreach (var item in descriptor.Dependencies)
            {
                VisitDependencyNode(item, orderList);
            }
        }

        var moduleDescriptors = AppModuleDependencyUtil.GetModuleDependencyRoots(types);

        var orderList = new List<KeyValuePair<string, string[]>>();

        foreach (var descriptor in moduleDescriptors)
        {
            VisitDependencyNode(descriptor, orderList);
        }

        Console.WriteLine($"\r\n---------orderList Start----------\r\n{string.Join("\r\n", orderList.Select(m => $"{m.Key} --> {string.Join(",", m.Value)}"))}\r\n---------orderList End----------\r\n");

        return orderList;
    }

    protected virtual void AutoCheckModuleConfigureOrder(params Type[] types)
    {
        var orderList = GetModuleOrderList(types);
        CheckModuleConfigureOrder(orderList);
    }

    protected virtual void CheckModuleConfigureOrder(List<KeyValuePair<string, string[]>> orderInfo)
    {
        foreach (var group in InvokeLogs.GroupBy(m => m.Value))
        {
            var method = group.Key;

            if (method.Contains(".ctor"))
            {
                //对象构建顺序好像并不重要
                continue;
            }

            Func<int, int, bool> comapre = method.Contains("Shutdown")
                                            ? (i1, i2) => i1 > i2
                                            : (i1, i2) => i1 < i2;

            foreach (var orderItem in orderInfo)
            {
                var baseIndex = group.IndexOf(m => m.Key == orderItem.Key);

                Assert.IsFalse(orderItem.Value.Any(moduleName => comapre(baseIndex, group.IndexOf(m => m.Key == moduleName))));
            }
        }
    }

    [TestInitialize]
    public override void InitDIContainer()
    {
        base.InitDIContainer();

        MethodInvokedLogger = new ModuleMethodInvokedLogger();
        ObserverDisposer = DiagnosticListener.AllListeners.Subscribe(new GeneralDiagnosticListenerObserver(listener =>
        {
            if (listener.Name == "ModuleMethodInvoked")
            {
                listener.SubscribeWithAdapter(MethodInvokedLogger);
            }
        }));
    }

    [TestCleanup]
    public virtual void ReleaseObserver()
    {
        ObserverDisposer?.Dispose();
        ShutdownModules();
    }

    protected virtual void LoadInitModules(params Type[] modules)
    {
        var builder = Services.LoadModule(new TypeModuleSource(modules), options => options.AddModuleAsService = true);

        Services.ModuleLoadComplete();

        ServiceProvider = Services.BuildServiceProvider();

        ServiceProvider.InitializationModulesWithOutHostLifetime();
    }

    protected virtual void ShutdownModules()
    {
        ServiceProvider.ShutdownModules();
    }

    #region Class

    public class GeneralDiagnosticListenerObserver : IObserver<DiagnosticListener>
    {
        #region Private 字段

        private readonly Action<DiagnosticListener> _next;

        #endregion Private 字段

        #region Public 构造函数

        public GeneralDiagnosticListenerObserver(Action<DiagnosticListener> next)
        {
            _next = next;
        }

        #endregion Public 构造函数

        #region Public 方法

        public void OnCompleted()
        {
        }

        public void OnError(Exception error)
        {
        }

        public void OnNext(DiagnosticListener value) => _next(value);

        #endregion Public 方法
    }

    public class ModuleMethodInvokedLogger
    {
        #region Public 属性

        public List<KeyValuePair<string, string>> Logs { get; set; } = [];

        #endregion Public 属性

        #region Public 方法

        [DiagnosticName("MethodLog")]
        public void MethodLog(string typeName, string methodName)
        {
            Console.WriteLine($"MethodLog: {typeName} - {methodName}");
            Logs.Add(new KeyValuePair<string, string>(typeName, methodName));
        }

        #endregion Public 方法
    }

    #endregion Class

    #endregion func
}
